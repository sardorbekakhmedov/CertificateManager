@page "/register"
@inject AuthenticationStateProvider AuthenticationStateProvider
@layout AuthLayout
@inject HttpClient httpClient
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorage
@inject IJSRuntime jsRuntime
@using Blazored.LocalStorage
@using CertificateManager.UI.Models.UserDTOs
@using CertificateManager.UI.Shared

<h3>Register</h3>

<EditForm Model="@userCreateDto" OnValidSubmit="HandleValidSubmit" id="registerForm" FormName="registerForm">
    <DataAnnotationsValidator />

    <label>Username:</label>
    <InputText @bind-Value="userCreateDto.Username" /><br />

    <label>Age:</label>
    <InputNumber @bind-Value="userCreateDto.Age" /><br />

    <label>Email:</label>
    <InputText @bind-Value="userCreateDto.Email" /><br />

    <label>Password:</label>
    <InputText @bind-Value="userCreateDto.Password" type="password" /><br />

    <label>Password Confirm:</label>
    <InputText @bind-Value="userCreateDto.PasswordConfirm" type="password" /><br />

    <button type="submit">Register</button>
</EditForm>

@code {
    private UserCreateDto userCreateDto = new();

    private async Task HandleValidSubmit()
    {
        try
        {
    // Send POST request to the API
            var response = await httpClient.PostAsJsonAsync("/api/users/create", userCreateDto);
            response.EnsureSuccessStatusCode();

    // Get UserID from the response
            var userId = await response.Content.ReadFromJsonAsync<Guid>();

    // Save UserID to LocalStorage
         //   await jsRuntime.InvokeVoidAsync("localStorage.setItem", "userId", userId.ToString());

    // Redirect to another page
            NavigationManager.NavigateTo("/login");
        }
        catch (Exception ex)
        {
    // Handle exceptions
            Console.WriteLine($"Error: {ex.Message}");
        }
    }
}