@page "/login"
@inject AuthenticationStateProvider AuthenticationStateProvider
@layout AuthLayout
@using CertificateManager.UI.Models.Tokens
@using Blazored.LocalStorage
@using CertificateManager.UI.Shared
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorage


<PageTitle>Login</PageTitle>

<h1 class="text-center mt-4"> Login </h1>

<Div Style="display:flex; justify-content:center; align-items:center; height:50vh" >


<EditForm class="w-25"  Model="@tokenRequest" OnValidSubmit="HandleValidSubmit" id="loginForm" FormName="loginForm">
    <DataAnnotationsValidator />

    <Field>
        <label>Username:</label>
        <InputText @bind-Value="tokenRequest.Username" Class="form-control" />
    </Field>

    <Field>
        <label>Password:</label>
        <InputText @bind-Value="tokenRequest.Password" type="password" Class="form-control" />
    </Field>

    <Div Style="display:flex;   gap:10px">
        <Field>
            <button type="submit" class="btn btn-primary">Submit</button>
        </Field>

        <Div>
            <a class="btn btn-primary" href="/register">Register</a>
        </Div>
    </Div>

   

</EditForm>


</Div>





@code {
    private TokenRequest tokenRequest = new ();
    private TokenResponse? _tokenResponse;

    private async Task HandleValidSubmit()
    {
        try
        {
            var response = await HttpClient.PostAsJsonAsync("/api/tokens/login", tokenRequest);
            response.EnsureSuccessStatusCode();

            _tokenResponse = await response.Content.ReadFromJsonAsync<TokenResponse>();

            if (_tokenResponse is not null)
            {
                await LocalStorage.SetItemAsync("token", _tokenResponse.Token);
                await LocalStorage.SetItemAsync("user-role", _tokenResponse.UserRole);
                NavigationManager.NavigateTo("/users");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }
}
