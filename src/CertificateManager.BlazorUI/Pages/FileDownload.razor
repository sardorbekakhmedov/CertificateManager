@page "/download-certificate/{certificateId}/{token}"
@using System.Net.Http.Headers
@inject HttpClient HttpClient
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager

<h3>Download Certificate</h3>

@if (_fileBytes != null)
{
    <button class="btn btn-success" @onclick="DownloadFile">Download Certificate</button>
}
else
{
    <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
}

@code {

    [Parameter]
    public string certificateId { get; set; }
    private Guid _certificateId;

    [Parameter]
    public string token { get; set; }
    private string _token;

    private byte[]? _fileBytes;
    private string? _fileName;

    protected override async Task OnInitializedAsync()
    {
        if (Guid.TryParse(certificateId, out _certificateId))
        {
            _token = token;

            HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
            var response = await HttpClient.GetAsync($"api/certificate/{certificateId}");

            response.EnsureSuccessStatusCode();

            var fileStream = await response.Content.ReadAsStreamAsync();
            _fileBytes = await response.Content.ReadAsByteArrayAsync();
            _fileName = "Certificate.pdf";

            StateHasChanged();
        }
        else
        {
            NavigationManager.NavigateTo("/");
        }
    }

    private async Task DownloadFile()
    {
        await JsRuntime.InvokeVoidAsync("saveAsFile", _fileName, Convert.ToBase64String(_fileBytes!));
    }
}