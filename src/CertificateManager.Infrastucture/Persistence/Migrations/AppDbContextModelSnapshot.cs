// <auto-generated />
using System;
using CertificateManager.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CertificateManager.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CertificateManager.Domain.Entities.Certificate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<byte[]>("CertificateData")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("certificate_data");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<Guid?>("LastModifiedById")
                        .HasColumnType("uuid")
                        .HasColumnName("last_modified_by_id");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_modified_date");

                    b.HasKey("Id")
                        .HasName("pk_certificates");

                    b.ToTable("certificates", (string)null);
                });

            modelBuilder.Entity("CertificateManager.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("Age")
                        .HasColumnType("integer")
                        .HasColumnName("age");

                    b.Property<Guid?>("CertificateId")
                        .HasColumnType("uuid")
                        .HasColumnName("certificate_id");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<bool>("HasCertificate")
                        .HasColumnType("boolean")
                        .HasColumnName("has_certificate");

                    b.Property<Guid?>("LastModifiedById")
                        .HasColumnType("uuid")
                        .HasColumnName("last_modified_by_id");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_modified_date");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<int>("UserRole")
                        .HasColumnType("integer")
                        .HasColumnName("user_role");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("CertificateId")
                        .HasDatabaseName("ix_users_certificate_id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("CertificateManager.Domain.Entities.User", b =>
                {
                    b.HasOne("CertificateManager.Domain.Entities.Certificate", "Certificate")
                        .WithMany("Users")
                        .HasForeignKey("CertificateId")
                        .HasConstraintName("fk_users_certificates_certificate_id");

                    b.Navigation("Certificate");
                });

            modelBuilder.Entity("CertificateManager.Domain.Entities.Certificate", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
