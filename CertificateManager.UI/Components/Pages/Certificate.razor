@page "/certificate"
@*@attribute [Authorize("")]*@
@inject HttpClient HttpClient
@using System.Net.Http
@using System.IO
@using Microsoft.AspNetCore.Authorization


<h1>Generate Certificate</h1>


<AuhthirzeView>
    <Authorized Roles="Admin">

    </Authorized>
</AuhthirzeView>

<form>
    <label for="firstName">First Name:</label>
    <input type="text" id="firstName" @bind="FirstName" /><br /><br />

    <label for="lastName">Last Name:</label>
    <input type="text" id="lastName" @bind="LastName" /><br /><br />

    <label for="email">Email:</label>
    <input type="text" id="email" @bind="Email" /><br /><br />

    <label for="organization">Organization:</label>
    <input type="text" id="organization" @bind="Organization" /><br /><br />

    <button type="button" @onclick="GenerateCertificateAsync">Generate Certificate</button>
</form>

@if (!string.IsNullOrEmpty(PdfUrl))
{
    <p>Download your certificate: <a href="@PdfUrl" download>Download</a></p>
}

@code {
    public string FirstName { get; set; }
    public string LastName { get; set; }
    public string Email { get; set; }
    public string Organization { get; set; }
    public string? PdfUrl { get; set; }

    public async Task GenerateCertificateAsync()
    {
        try
        {
            var response = await HttpClient.PostAsJsonAsync("/api/certificate", new
            {
                firstName = FirstName,
                lastName = LastName,
                email = Email,
                organization = Organization
            });

            response.EnsureSuccessStatusCode();

            var pdfBytes = await response.Content.ReadAsByteArrayAsync();

            // Save PDF file
            var fileName = "certificate.pdf";
            var filePath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.UserProfile), fileName);

            Console.WriteLine(filePath);

            await File.WriteAllBytesAsync(filePath, pdfBytes);

            PdfUrl = filePath; // or you can use a URL to the file if it's accessible
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
}














@* @page "/certificate"

<h1 style="text-align:center" >Generate Certificate</h1>

<form style="text-align:center">
    <label for="firstName">First Name:</label>
    <input type="text" id="firstName" @bind="FirstName" /><br /><br />
    
    <label for="lastName">Last Name:</label>
    <input type="text" id="lastName" @bind="LastName" /><br /><br />
    
    <label for="email">Email:</label>
    <input type="text" id="email" @bind="Email" /><br /><br />
    
    <label for="organization">Organization:</label>
    <input type="text" id="organization" @bind="Organization" /><br /><br />
    
    <button @onclick="GenerateCertificateAsync">Generate Certificate</button>

</form>

@if (!string.IsNullOrEmpty(PdfUrl))
{
    <p>Download your certificate: <a href="@PdfUrl" download>Download</a></p>
}

@code {
    private string FirstName { get; set; }
    private string LastName { get; set; }
    private string Email { get; set; }
    private string Organization { get; set; }
    private string? PdfUrl { get; set; }

    private async Task GenerateCertificateAsync()
    {
        try
        {
            var baseUrl = "https://localhost:7012";

            using var client = new HttpClient();
            client.BaseAddress = new Uri(baseUrl);

            var response = await client.GetAsync($"/api/certificate?firstName={FirstName}&lastName={LastName}&email={Email}&organization={Organization}");
            response.EnsureSuccessStatusCode();
            var pdfBytes = await response.Content.ReadAsByteArrayAsync();

            PdfUrl = $"data:application/pdf;base64,{Convert.ToBase64String(pdfBytes)}";
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

} *@